#!/bin/bash
# Simplified installation script for chezmoi dotfiles
set -uo pipefail  # Remove -e to continue on errors

echo "üöÄ Setting up development environment..."

# Function to detect OS
detect_os() {
    case "$(uname -s)" in
        Linux*)     echo "linux";;
        Darwin*)    echo "macos";;
        MINGW*|MSYS*|CYGWIN*) echo "windows";;
        *)          echo "unknown";;
    esac
}

# Function to detect Linux distribution
detect_linux_distro() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        echo "${ID}"
    else
        echo "unknown"
    fi
}

# Function to detect package manager
detect_package_manager() {
    if command -v apt-get &> /dev/null; then
        echo "apt"
    elif command -v dnf &> /dev/null; then
        echo "dnf"
    elif command -v pacman &> /dev/null; then
        echo "pacman"
    elif command -v brew &> /dev/null; then
        echo "brew"
    elif command -v winget &> /dev/null; then
        echo "winget"
    else
        echo "none"
    fi
}

OS_TYPE=$(detect_os)
PKG_MGR=$(detect_package_manager)
LINUX_DISTRO=""

# Detect Linux distribution if on Linux
if [[ "$OS_TYPE" == "linux" ]]; then
    LINUX_DISTRO=$(detect_linux_distro)
fi

echo "Detected OS: $OS_TYPE"
[[ -n "$LINUX_DISTRO" ]] && echo "Detected Linux distribution: $LINUX_DISTRO"
echo "Detected package manager: $PKG_MGR"

# Ensure ~/.local/bin is in PATH from the start
mkdir -p "$HOME/.local/bin"
export PATH="$HOME/.local/bin:$PATH"

# Function to verify SHA256 checksum
verify_checksum() {
    local file="$1"
    local expected_checksum="$2"
    
    if [[ -z "$expected_checksum" ]]; then
        echo "  ‚ö†Ô∏è  No checksum provided, skipping verification"
        return 0
    fi
    
    local actual_checksum
    if command -v sha256sum &> /dev/null; then
        actual_checksum=$(sha256sum "$file" | cut -d' ' -f1)
    elif command -v shasum &> /dev/null; then
        actual_checksum=$(shasum -a 256 "$file" | cut -d' ' -f1)
    else
        echo "  ‚ö†Ô∏è  No SHA256 tool available, skipping verification"
        return 0
    fi
    
    if [[ "$actual_checksum" == "$expected_checksum" ]]; then
        echo "  ‚úÖ Checksum verified"
        return 0
    else
        echo "  ‚ùå Checksum verification failed!"
        echo "  Expected: $expected_checksum"
        echo "  Actual:   $actual_checksum"
        return 1
    fi
}

# Function to ensure ~/.local/bin is in PATH
ensure_local_bin_in_path() {
    local LOCAL_BIN="$HOME/.local/bin"
    
    # Create directory if it doesn't exist
    mkdir -p "$LOCAL_BIN"
    
    # Check if already in PATH
    if [[ ":$PATH:" == *":$LOCAL_BIN:"* ]]; then
        return 0
    fi
    
    echo "  üìù Adding ~/.local/bin to PATH..."
    
    # Determine which shell config to update
    local SHELL_CONFIG=""
    if [[ -f "$HOME/.bashrc" ]]; then
        SHELL_CONFIG="$HOME/.bashrc"
    elif [[ -f "$HOME/.zshrc" ]]; then
        SHELL_CONFIG="$HOME/.zshrc"
    elif [[ -f "$HOME/.profile" ]]; then
        SHELL_CONFIG="$HOME/.profile"
    fi
    
    if [[ -n "$SHELL_CONFIG" ]]; then
        # Check if PATH export already exists
        if ! grep -q "export PATH.*\.local/bin" "$SHELL_CONFIG"; then
            echo "" >> "$SHELL_CONFIG"
            echo "# Added by chezmoi dotfiles installer" >> "$SHELL_CONFIG"
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$SHELL_CONFIG"
            echo "  ‚úÖ Added ~/.local/bin to PATH in $SHELL_CONFIG"
            echo "  üìù Please run: source $SHELL_CONFIG"
        else
            echo "  ‚úÖ ~/.local/bin already configured in $SHELL_CONFIG"
        fi
    else
        echo "  ‚ö†Ô∏è  Could not find shell config file"
        echo "  üìù Please add this to your shell config:"
        echo '     export PATH="$HOME/.local/bin:$PATH"'
    fi
    
    # Export for current session
    export PATH="$HOME/.local/bin:$PATH"
}

# Track if apt-get update has been run
APT_UPDATED=false

# Function to ensure apt-get update has been run once
ensure_apt_updated() {
    if [[ "$PKG_MGR" == "apt" ]] && [[ "$APT_UPDATED" == "false" ]]; then
        echo "üì¶ Updating package lists..."
        sudo apt-get update -qq
        APT_UPDATED=true
    fi
}

# Install Starship
if ! command -v starship &> /dev/null; then
    echo "üì¶ Installing Starship..."
    
    if [[ "$OS_TYPE" == "windows" ]] && [[ "$PKG_MGR" == "winget" ]]; then
        winget install --id Starship.Starship -e --silent --accept-package-agreements --accept-source-agreements
    else
        # Download installer script first for security
        TEMP_SCRIPT=$(mktemp)
        echo "  Downloading Starship installer..."
        
        if curl -sS https://starship.rs/install.sh -o "$TEMP_SCRIPT"; then
            # Check if script was downloaded successfully
            if [[ -s "$TEMP_SCRIPT" ]]; then
                echo "  Running Starship installer..."
                sh "$TEMP_SCRIPT" -y
                rm -f "$TEMP_SCRIPT"
            else
                echo "  ‚ö†Ô∏è  Failed to download Starship installer"
                echo "  üìù Please install manually from: https://starship.rs/"
                rm -f "$TEMP_SCRIPT"
            fi
        else
            echo "  ‚ö†Ô∏è  Failed to download Starship installer"
            echo "  üìù Please install manually from: https://starship.rs/"
            rm -f "$TEMP_SCRIPT"
        fi
    fi
    
    if command -v starship &> /dev/null; then
        echo "‚úÖ Starship installed"
    fi
else
    echo "‚úÖ Starship already installed"
fi

# Install Nushell
if ! command -v nu &> /dev/null; then
    echo "üì¶ Installing Nushell..."
    
    case "$PKG_MGR" in
        apt)
            if [[ "$LINUX_DISTRO" == "debian" ]]; then
                # Debian-specific installation
                echo "  ‚ÑπÔ∏è  Detected Debian - Nushell not in default repos"
                echo "  üîß Attempting to install via binary release..."
                
                # Get latest release version with rate limit handling
                echo "  Fetching latest Nushell version..."
                NUSHELL_VERSION=$(curl -fsS -H "Accept: application/vnd.github.v3+json" \
                    https://api.github.com/repos/nushell/nushell/releases/latest | \
                    grep -Po '"tag_name": "\K[^"]*' || echo "")
                
                if [[ -z "$NUSHELL_VERSION" ]]; then
                    # Retry once in case of temporary failure
                    sleep 2
                    NUSHELL_VERSION=$(curl -fsS -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/nushell/nushell/releases/latest | \
                        grep -Po '"tag_name": "\K[^"]*' || echo "")
                fi
                
                if [[ -n "$NUSHELL_VERSION" ]]; then
                    # Determine architecture
                    ARCH=$(uname -m)
                    case "$ARCH" in
                        x86_64) ARCH_NAME="x86_64-unknown-linux-musl" ;;
                        aarch64) ARCH_NAME="aarch64-unknown-linux-gnu" ;;
                        *) 
                            echo "  ‚ö†Ô∏è  Unsupported architecture: $ARCH"
                            echo "  üìù Please install manually from: https://www.nushell.sh/book/installation.html"
                            ;;
                    esac
                    
                    if [[ -n "$ARCH_NAME" ]]; then
                        DOWNLOAD_URL="https://github.com/nushell/nushell/releases/download/${NUSHELL_VERSION}/nu-${NUSHELL_VERSION}-${ARCH_NAME}.tar.gz"
                        TEMP_DIR=$(mktemp -d)
                        
                        echo "  Downloading Nushell ${NUSHELL_VERSION}..."
                        if curl -fsSL "$DOWNLOAD_URL" -o "$TEMP_DIR/nushell.tar.gz"; then
                            # Nushell doesn't provide .sha256 files in their releases
                            # We can at least verify the download completed successfully
                            if [[ -f "$TEMP_DIR/nushell.tar.gz" ]] && [[ -s "$TEMP_DIR/nushell.tar.gz" ]]; then
                                echo "  ‚úÖ Download completed successfully"
                            else
                                echo "  ‚ùå Download appears incomplete or corrupted"
                                rm -rf "$TEMP_DIR"
                                echo "  üìù Please install manually from: https://www.nushell.sh/"
                                return
                            fi
                            
                            tar -xzf "$TEMP_DIR/nushell.tar.gz" -C "$TEMP_DIR"
                            
                            # Install to ~/.local/bin
                            mkdir -p "$HOME/.local/bin"
                            cp "$TEMP_DIR/nu-${NUSHELL_VERSION}-${ARCH_NAME}/nu" "$HOME/.local/bin/"
                            chmod +x "$HOME/.local/bin/nu"
                            
                            rm -rf "$TEMP_DIR"
                            echo "  ‚úÖ Nushell installed to ~/.local/bin/nu"
                            
                            # Ensure PATH is configured
                            ensure_local_bin_in_path
                        else
                            echo "  ‚ö†Ô∏è  Failed to download Nushell"
                            echo "  üìù Please install manually from: https://www.nushell.sh/"
                        fi
                    fi
                else
                    echo "  ‚ö†Ô∏è  Could not determine latest Nushell version (API rate limit?)"
                    echo "  üìù Alternative installation methods:"
                    echo "     - Install Rust and run: cargo install nu"
                    echo "     - Download from: https://github.com/nushell/nushell/releases"
                fi
            elif [[ "$LINUX_DISTRO" == "ubuntu" ]]; then
                # Ubuntu-specific installation - prefer snap
                if command -v snap &> /dev/null; then
                    echo "  üì¶ Installing Nushell via snap..."
                    sudo snap install nushell --classic || echo "  ‚ö†Ô∏è  Failed to install Nushell via snap"
                else
                    echo "  ‚ÑπÔ∏è  Snap not available on Ubuntu"
                    echo "  üìù Installing snapd..."
                    sudo apt-get install -y snapd
                    sudo snap install nushell --classic || echo "  ‚ö†Ô∏è  Failed to install Nushell"
                fi
            else
                # Generic apt-based system
                if command -v snap &> /dev/null; then
                    echo "  üì¶ Installing Nushell via snap..."
                    sudo snap install nushell --classic || echo "  ‚ö†Ô∏è  Failed to install Nushell via snap"
                else
                    echo "  ‚ÑπÔ∏è  Nushell not in default apt repos and snap not available"
                    echo "  üìù To install: https://www.nushell.sh/book/installation.html#ubuntu-debian"
                fi
            fi
            ;;
        dnf)
            sudo dnf install -y nushell
            ;;
        pacman)
            sudo pacman -S --noconfirm nushell
            ;;
        brew)
            brew install nushell
            ;;
        winget)
            winget install --id Nushell.Nushell -e --silent --accept-package-agreements --accept-source-agreements
            ;;
        *)
            echo "‚ö†Ô∏è  Please install Nushell manually from https://www.nushell.sh/"
            ;;
    esac
else
    echo "‚úÖ Nushell already installed"
fi

# Install Fish (not on Windows)
if [[ "$OS_TYPE" != "windows" ]] && ! command -v fish &> /dev/null; then
    echo "üì¶ Installing Fish shell..."
    
    case "$PKG_MGR" in
        apt)
            if [[ "$LINUX_DISTRO" == "debian" ]]; then
                # Fish is available in Debian repos
                ensure_apt_updated
                sudo apt-get install -y fish || echo "  ‚ö†Ô∏è  Fish not available in your Debian version"
            elif [[ "$LINUX_DISTRO" == "ubuntu" ]]; then
                # Fish is in universe repository on Ubuntu
                ensure_apt_updated
                sudo apt-get install -y fish || {
                    echo "  ‚ÑπÔ∏è  Fish not found, enabling universe repository..."
                    sudo add-apt-repository universe -y 2>/dev/null
                    sudo apt-get update -qq  # Need to update after adding repository
                    sudo apt-get install -y fish || echo "  ‚ö†Ô∏è  Failed to install Fish"
                }
            else
                # Generic apt system
                ensure_apt_updated
                sudo apt-get install -y fish || echo "  ‚ö†Ô∏è  Fish not available"
            fi
            ;;
        dnf)
            sudo dnf install -y fish
            ;;
        pacman)
            sudo pacman -S --noconfirm fish
            ;;
        brew)
            brew install fish
            ;;
        *)
            echo "‚ö†Ô∏è  Please install Fish manually"
            ;;
    esac
else
    echo "‚úÖ Fish already installed or not applicable for this OS"
fi

# Install JetBrains Mono Nerd Font
echo "üì¶ Checking JetBrains Mono Nerd Font..."

install_nerd_font() {
    local FONT_NAME="JetBrainsMono"
    local FONT_URL="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/${FONT_NAME}.zip"
    
    case "$OS_TYPE" in
        linux|macos)
            # Check if font is already installed
            if fc-list | grep -qi "JetBrainsMono.*Nerd"; then
                echo "‚úÖ JetBrains Mono Nerd Font already installed"
                return
            fi
            
            # Ensure unzip is available
            if ! command -v unzip &> /dev/null; then
                echo "  üì¶ Installing unzip..."
                case "$PKG_MGR" in
                    apt) sudo apt-get install -y unzip ;;
                    dnf) sudo dnf install -y unzip ;;
                    pacman) sudo pacman -S --noconfirm unzip ;;
                    brew) brew install unzip ;;
                esac
            fi
            
            # Download and install
            local FONT_DIR="$HOME/.local/share/fonts"
            [[ "$OS_TYPE" == "macos" ]] && FONT_DIR="$HOME/Library/Fonts"
            
            mkdir -p "$FONT_DIR"
            local TEMP_DIR=$(mktemp -d)
            
            echo "  Downloading font..."
            curl -sL "$FONT_URL" -o "$TEMP_DIR/font.zip"
            unzip -q "$TEMP_DIR/font.zip" -d "$TEMP_DIR"
            
            # Copy only the font files we need
            find "$TEMP_DIR" -name "*.ttf" -o -name "*.otf" | \
                grep -E "(Regular|Bold|Italic|BoldItalic)" | \
                xargs -I {} cp {} "$FONT_DIR/"
            
            # Update font cache
            if [[ "$OS_TYPE" == "linux" ]]; then
                fc-cache -f
                echo "  Font cache updated"
            fi
            
            rm -rf "$TEMP_DIR"
            echo "‚úÖ JetBrains Mono Nerd Font installed"
            ;;
            
        windows)
            if [[ "$PKG_MGR" == "winget" ]]; then
                winget install --id DEVCOM.JetBrainsMonoNerdFont -e --silent --accept-package-agreements --accept-source-agreements || {
                    echo "‚ö†Ô∏è  Please install JetBrains Mono Nerd Font manually from:"
                    echo "    https://github.com/ryanoasis/nerd-fonts/releases"
                }
            else
                echo "‚ö†Ô∏è  Please install JetBrains Mono Nerd Font manually"
            fi
            ;;
    esac
}

install_nerd_font

# Final setup message
echo ""
# Install modern CLI tools
echo "üì¶ Installing modern CLI tools..."

install_cli_tools() {
    echo "üîß Attempting to install developer tools..."
    
    case "$PKG_MGR" in
        apt)
            ensure_apt_updated
            
            # Handle distribution-specific package availability
            if [[ "$LINUX_DISTRO" == "debian" ]]; then
                echo "  ‚ÑπÔ∏è  Installing tools for Debian..."
                
                # ripgrep is available in Debian
                sudo apt-get install -y ripgrep 2>/dev/null || echo "  ‚ö†Ô∏è  ripgrep not available"
                
                # fd-find is available in Debian 10+ as fd-find
                sudo apt-get install -y fd-find 2>/dev/null || echo "  ‚ö†Ô∏è  fd-find not available"
                
                # bat might not be available in older Debian versions
                if ! sudo apt-get install -y bat 2>/dev/null; then
                    echo "  ‚ÑπÔ∏è  bat not in Debian repos, attempting manual install..."
                    # Download bat binary for Debian with rate limit handling
                    echo "  Fetching latest bat version..."
                    BAT_VERSION=$(curl -fsS -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/sharkdp/bat/releases/latest | \
                        grep -Po '"tag_name": "v\K[^"]*' || echo "")
                    
                    if [[ -z "$BAT_VERSION" ]]; then
                        # Retry once
                        sleep 2
                        BAT_VERSION=$(curl -fsS -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/sharkdp/bat/releases/latest | \
                            grep -Po '"tag_name": "v\K[^"]*' || echo "")
                    fi
                    
                    if [[ -n "$BAT_VERSION" ]]; then
                        ARCH=$(dpkg --print-architecture)
                        BAT_DEB="bat_${BAT_VERSION}_${ARCH}.deb"
                        BAT_URL="https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/${BAT_DEB}"
                        TEMP_DIR=$(mktemp -d)
                        
                        echo "  Downloading bat ${BAT_VERSION}..."
                        if curl -sL "$BAT_URL" -o "$TEMP_DIR/${BAT_DEB}"; then
                            # bat doesn't provide .sha256 files, but we can verify the .deb is valid
                            if dpkg-deb --info "$TEMP_DIR/${BAT_DEB}" &> /dev/null; then
                                echo "  ‚úÖ Package integrity verified"
                                sudo dpkg -i "$TEMP_DIR/${BAT_DEB}" 2>/dev/null || {
                                    echo "  üì¶ Installing dependencies..."
                                    sudo apt-get install -f -y
                                }
                            else
                                echo "  ‚ùå Downloaded package appears corrupted"
                            fi
                            rm -rf "$TEMP_DIR"
                        else
                            echo "  ‚ö†Ô∏è  Failed to download bat"
                        fi
                    else
                        echo "  ‚ö†Ô∏è  Could not determine bat version (API rate limit?)"
                        echo "  üìù Please install manually from: https://github.com/sharkdp/bat/releases"
                    fi
                fi
                
                # git-delta usually requires manual installation on Debian
                echo "  ‚ÑπÔ∏è  git-delta not in Debian repos"
                echo "  üìù To install: https://github.com/dandavison/delta/releases"
                
                # lsd might not be available
                if ! sudo apt-get install -y lsd 2>/dev/null; then
                    echo "  ‚ÑπÔ∏è  lsd not in Debian repos"
                    echo "  üìù To install: https://github.com/lsd-rs/lsd/releases"
                fi
                
            elif [[ "$LINUX_DISTRO" == "ubuntu" ]]; then
                echo "  ‚ÑπÔ∏è  Installing tools for Ubuntu..."
                
                # Install available tools, continue if some fail
                for tool in bat ripgrep fd-find git-delta lsd; do
                    if ! sudo apt-get install -y "$tool" 2>/dev/null; then
                        # Try snap as fallback
                        if command -v snap &> /dev/null; then
                            case "$tool" in
                                bat) sudo snap install batcat --classic && sudo snap alias batcat bat ;;
                                ripgrep) sudo snap install ripgrep --classic ;;
                                fd-find) sudo snap install fd --classic ;;
                                git-delta) echo "  ‚ÑπÔ∏è  git-delta not available in snap" ;;
                                lsd) sudo snap install lsd --classic ;;
                            esac || echo "  ‚ö†Ô∏è  $tool not available in apt or snap"
                        else
                            echo "  ‚ö†Ô∏è  $tool not available in apt"
                        fi
                    fi
                done
            else
                # Generic apt-based system
                for tool in bat ripgrep fd-find git-delta lsd; do
                    sudo apt-get install -y "$tool" 2>/dev/null || echo "  ‚ö†Ô∏è  $tool not available"
                done
            fi
            ;;
        dnf)
            for tool in bat ripgrep fd-find git-delta lsd; do
                sudo dnf install -y "$tool" 2>/dev/null || echo "  ‚ö†Ô∏è  $tool not available in dnf"
            done
            ;;
        pacman)
            for tool in bat ripgrep fd lsd; do
                sudo pacman -S --noconfirm "$tool" 2>/dev/null || echo "  ‚ö†Ô∏è  $tool not available in pacman"
            done
            ;;
        brew)
            brew install bat ripgrep fd git-delta lsd || true
            ;;
        *)
            echo "‚ö†Ô∏è  No supported package manager found"
            echo "   Please install these tools manually:"
            echo "   - bat: https://github.com/sharkdp/bat"
            echo "   - ripgrep: https://github.com/BurntSushi/ripgrep"
            echo "   - fd: https://github.com/sharkdp/fd"
            echo "   - delta: https://github.com/dandavison/delta"
            echo "   - lsd: https://github.com/lsd-rs/lsd"
            return
            ;;
    esac
    
    echo "‚úÖ CLI tools installation attempted"
    echo "   Run 'bat --version' etc. to verify what's installed"
}

# Only install if package manager is available
if [[ "$PKG_MGR" != "none" ]] && [[ "$PKG_MGR" != "winget" ]]; then
    install_cli_tools
fi

# Configure Starship for Nushell if it's installed
if command -v nu &> /dev/null && command -v starship &> /dev/null; then
    echo "üöÄ Configuring Starship for Nushell..."
    
    # Get Nushell data directory
    NU_DATA_DIR=$(nu -c 'echo $nu.data-dir')
    
    # Create vendor/autoload directory
    mkdir -p "$NU_DATA_DIR/vendor/autoload"
    
    # Generate Starship init script for Nushell
    starship init nu > "$NU_DATA_DIR/vendor/autoload/starship.nu"
    
    echo "‚úÖ Starship configured for Nushell"
fi

# Create convenience aliases for tools with different names
if [[ "$PKG_MGR" == "apt" ]]; then
    echo "üìù Setting up command aliases..."
    
    # Create local bin directory if it doesn't exist
    mkdir -p "$HOME/.local/bin"
    
    # Create fd alias for fd-find
    if command -v fd-find &> /dev/null && ! command -v fd &> /dev/null; then
        ln -sf $(which fd-find) "$HOME/.local/bin/fd"
        echo "  Created alias: fd -> fd-find"
    fi
    
    # Create nu alias for nushell if installed via snap
    if snap list 2>/dev/null | grep -q nushell && ! command -v nu &> /dev/null; then
        ln -sf /snap/bin/nu "$HOME/.local/bin/nu"
        echo "  Created alias: nu -> /snap/bin/nu"
    fi
    
    # batcat is already handled by the package itself on newer Ubuntu
fi

echo "‚ú® Installation complete!"
echo ""
echo "üìù Next steps:"
echo "1. Run 'chezmoi apply' to apply the configuration"
echo "2. Restart your terminal or source your shell config"
echo ""

# OS-specific notes
case "$OS_TYPE" in
    windows)
        echo "üí° Windows notes:"
        echo "- Fish shell is not available on Windows (use WSL if needed)"
        echo "- Make sure to restart Windows Terminal after font installation"
        ;;
    macos)
        echo "üí° macOS notes:"
        echo "- You may need to select JetBrainsMono Nerd Font in Terminal preferences"
        ;;
    linux)
        echo "üí° Linux notes:"
        echo "- You may need to select JetBrainsMono Nerd Font in your terminal emulator"
        
        if [[ "$LINUX_DISTRO" == "debian" ]]; then
            echo ""
            echo "üìù Debian-specific notes:"
            echo "- Nushell was installed to ~/.local/bin/nu (ensure PATH includes ~/.local/bin)"
            echo "- Some tools (bat, git-delta, lsd) may need manual installation"
            echo "- Visit the links provided above for manual installation instructions"
        elif [[ "$LINUX_DISTRO" == "ubuntu" ]]; then
            echo ""
            echo "üìù Ubuntu-specific notes:"
            echo "- Snap packages are used for some tools when apt packages aren't available"
            echo "- If snap is not installed, some tools may require manual installation"
        fi
        ;;
esac
