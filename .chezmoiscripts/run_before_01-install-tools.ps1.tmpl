{{ if eq .chezmoi.os "windows" -}}
# Install JetBrainsMono Nerd Font, Starship, and Nu shell on Windows

# Check if running as Administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
if (-not $isAdmin) {
    Write-Host "Note: Running without admin rights. Some installations may require elevation." -ForegroundColor Yellow
}

# Check if font already installed
$fontInstalled = (Get-ChildItem -Path "$env:LOCALAPPDATA\Microsoft\Windows\Fonts\JetBrainsMonoNerdFont-*.ttf" -ErrorAction SilentlyContinue) -or `
                (Get-ChildItem -Path "C:\Windows\Fonts\JetBrainsMonoNerdFont-*.ttf" -ErrorAction SilentlyContinue)

if (-not $fontInstalled) {
    Write-Host "‚¨áÔ∏è  Installing JetBrainsMono Nerd Font..." -ForegroundColor Yellow
    
    if (Get-Command winget -ErrorAction SilentlyContinue) {
        try {
            winget install --id=DEVCOM.JetBrainsMonoNerdFont --silent --accept-package-agreements --accept-source-agreements
            Write-Host "   ‚úì JetBrainsMono Nerd Font installed successfully" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå Failed to install font via winget: $_" -ForegroundColor Red
            Write-Host "   Please install manually from: https://github.com/ryanoasis/nerd-fonts" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  Winget not found. Please install manually from: https://github.com/ryanoasis/nerd-fonts" -ForegroundColor Red
    }
} else {
    Write-Host "   ‚úì JetBrainsMono Nerd Font already installed" -ForegroundColor Green
}

# Install Starship if missing
if (-not (Get-Command starship -ErrorAction SilentlyContinue)) {
    Write-Host "‚¨áÔ∏è  Installing Starship..." -ForegroundColor Yellow
    if (Get-Command winget -ErrorAction SilentlyContinue) {
        try {
            winget install --id=Starship.Starship --silent --accept-package-agreements --accept-source-agreements
            Write-Host "   ‚úì Starship installed successfully" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå Failed to install Starship: $_" -ForegroundColor Red
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  Winget not found. Please install Starship manually." -ForegroundColor Red
    }
} else {
    Write-Host "   ‚úì Starship already installed" -ForegroundColor Green
}

# Install Nu shell if missing
if (-not (Get-Command nu -ErrorAction SilentlyContinue)) {
    Write-Host "‚¨áÔ∏è  Installing Nu shell..." -ForegroundColor Yellow
    if (Get-Command winget -ErrorAction SilentlyContinue) {
        try {
            winget install --id=Nushell.Nushell --silent --accept-package-agreements --accept-source-agreements
            Write-Host "   ‚úì Nu shell installed successfully" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå Failed to install Nu shell: $_" -ForegroundColor Red
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  Winget not found. Please install Nu shell manually." -ForegroundColor Red
    }
} else {
    Write-Host "   ‚úì Nu shell already installed" -ForegroundColor Green
}

# Configure Starship for PowerShell
Write-Host "‚öôÔ∏è  Configuring Starship for PowerShell..." -ForegroundColor Cyan

# Check if PowerShell profile already has Starship configuration
$profileExists = Test-Path $PROFILE
$starshipConfigured = $false

if ($profileExists) {
    $profileContent = Get-Content $PROFILE -Raw
    if ($profileContent -match "starship init powershell") {
        $starshipConfigured = $true
    }
}

if (-not $starshipConfigured) {
    # The profile will be created/updated by run_after_setup-powershell.ps1
    Write-Host "   ‚Ñπ PowerShell profile will be configured by chezmoi" -ForegroundColor Cyan
} else {
    Write-Host "   ‚úì Starship already configured for PowerShell" -ForegroundColor Green
}

# Note about Fish shell
Write-Host "" # Empty line for readability
Write-Host "Note: Fish shell is not available on Windows. Use WSL for Fish shell." -ForegroundColor Cyan

# Check for Git Bash
if (Test-Path "C:\Program Files\Git\bin\bash.exe") {
    Write-Host "Git Bash detected. Run the shell script from Git Bash to configure it." -ForegroundColor Yellow
}

# Check for WSL
if (Get-Command wsl -ErrorAction SilentlyContinue) {
    Write-Host "WSL detected. Run 'chezmoi apply' inside WSL to configure Linux shells." -ForegroundColor Yellow
}

Write-Host "üéâ Windows setup complete!" -ForegroundColor Green
{{ end -}}
