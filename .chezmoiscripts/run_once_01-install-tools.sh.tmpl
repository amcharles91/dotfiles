#!/bin/bash
# This script runs once when setting up a new system
# It prompts to install essential tools if they're missing

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Checking Essential Tools ===${NC}\n"

# Check for C compiler (required for building Rust packages)
if ! command -v cc &> /dev/null && ! command -v gcc &> /dev/null; then
    echo -e "${YELLOW}C compiler not found!${NC}"
    echo "A C compiler is required to build some Rust packages from source."
    echo ""
    
    # Detect OS and provide appropriate install command
    if command -v apt-get &> /dev/null; then
        # Debian/Ubuntu
        echo "Install with: sudo apt update && sudo apt install -y build-essential"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo apt update && sudo apt install -y build-essential
            echo -e "${GREEN}✓ Build tools installed!${NC}"
        fi
    elif command -v dnf &> /dev/null; then
        # Fedora
        echo "Install with: sudo dnf groupinstall -y 'Development Tools'"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo dnf groupinstall -y 'Development Tools'
            echo -e "${GREEN}✓ Build tools installed!${NC}"
        fi
    elif command -v yum &> /dev/null; then
        # RHEL/CentOS
        echo "Install with: sudo yum groupinstall -y 'Development Tools'"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo yum groupinstall -y 'Development Tools'
            echo -e "${GREEN}✓ Build tools installed!${NC}"
        fi
    elif command -v pacman &> /dev/null; then
        # Arch
        echo "Install with: sudo pacman -S --needed base-devel"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo pacman -S --needed base-devel
            echo -e "${GREEN}✓ Build tools installed!${NC}"
        fi
    elif command -v zypper &> /dev/null; then
        # openSUSE
        echo "Install with: sudo zypper install -t pattern devel_basis"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo zypper install -t pattern devel_basis
            echo -e "${GREEN}✓ Build tools installed!${NC}"
        fi
    elif command -v apk &> /dev/null; then
        # Alpine
        echo "Install with: sudo apk add build-base"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo apk add build-base
            echo -e "${GREEN}✓ Build tools installed!${NC}"
        fi
    else
        echo -e "${YELLOW}Please install a C compiler (gcc or clang) and development tools for your system.${NC}"
    fi
else
    echo -e "${GREEN}✓ C compiler already installed${NC}"
fi

# Check for pkg-config (often required for Rust packages)
if ! command -v pkg-config &> /dev/null; then
    echo -e "\n${YELLOW}pkg-config not found!${NC}"
    echo "Some Rust packages require pkg-config for finding system libraries."
    echo ""
    
    if command -v apt-get &> /dev/null; then
        echo "Install with: sudo apt install -y pkg-config"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo apt install -y pkg-config
            echo -e "${GREEN}✓ pkg-config installed!${NC}"
        fi
    elif command -v dnf &> /dev/null; then
        echo "Install with: sudo dnf install -y pkgconfig"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo dnf install -y pkgconfig
            echo -e "${GREEN}✓ pkg-config installed!${NC}"
        fi
    elif command -v pacman &> /dev/null; then
        echo "Install with: sudo pacman -S --needed pkgconf"
        read -p "Run this command now? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo pacman -S --needed pkgconf
            echo -e "${GREEN}✓ pkg-config installed!${NC}"
        fi
    fi
else
    echo -e "${GREEN}✓ pkg-config already installed${NC}"
fi

# Check and install Rust/Cargo
if ! command -v cargo &> /dev/null; then
    echo -e "${YELLOW}Rust/Cargo not found!${NC}"
    echo "Rust is needed for many modern CLI tools (ripgrep, bat, eza, fnm, etc.)"
    echo ""
    read -p "Install Rust now? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Installing Rust...${NC}"
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"
        echo -e "${GREEN}✓ Rust installed!${NC}"
    else
        echo -e "${YELLOW}Skipping Rust installation${NC}"
    fi
else
    echo -e "${GREEN}✓ Rust/Cargo already installed${NC}"
fi

# Check cargo-binstall
if command -v cargo &> /dev/null && ! command -v cargo-binstall &> /dev/null; then
    echo -e "\n${YELLOW}cargo-binstall not found!${NC}"
    echo "This tool enables fast binary installations instead of compiling from source."
    echo ""
    read -p "Install cargo-binstall? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Installing cargo-binstall...${NC}"
        cargo install cargo-binstall
        echo -e "${GREEN}✓ cargo-binstall installed!${NC}"
    fi
else
    [[ -x "$(command -v cargo-binstall)" ]] && echo -e "${GREEN}✓ cargo-binstall already installed${NC}"
fi

# Run install-cargo-tools if it exists and user wants to
if [[ -x "$HOME/.local/bin/install-cargo-tools" ]] && command -v cargo &> /dev/null; then
    echo -e "\n${BLUE}Ready to install recommended cargo tools${NC}"
    echo "Tools include: fnm, ripgrep, bat, eza, fd, and more"
    echo ""
    read -p "Run install-cargo-tools now? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        "$HOME/.local/bin/install-cargo-tools"
    else
        echo -e "${YELLOW}You can run 'install-cargo-tools' anytime to install recommended tools${NC}"
    fi
fi

echo -e "\n${GREEN}Tool check complete!${NC}"