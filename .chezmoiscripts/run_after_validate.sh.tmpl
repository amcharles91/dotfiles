{{- if ne .chezmoi.os "windows" -}}
#!/bin/bash
# Validation script to ensure everything is properly configured
set -uo pipefail  # Remove -e to continue validation even if commands fail

echo "üîç Validating chezmoi configuration..."

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Track validation status
VALIDATION_PASSED=true

# Function to check if a command exists
check_command() {
    local cmd="$1"
    local required="${2:-false}"
    
    if command -v "$cmd" &> /dev/null; then
        echo -e "${GREEN}‚úì${NC} $cmd is installed"
        return 0
    else
        if [[ "$required" == "true" ]]; then
            echo -e "${RED}‚úó${NC} $cmd is NOT installed (required)"
            VALIDATION_PASSED=false
        else
            echo -e "${YELLOW}‚ö†${NC} $cmd is NOT installed (optional)"
        fi
        return 1
    fi
}

# Function to check if a file exists
check_file() {
    local file="$1"
    local description="$2"
    
    if [[ -f "$file" ]]; then
        echo -e "${GREEN}‚úì${NC} $description exists"
        return 0
    else
        echo -e "${RED}‚úó${NC} $description is missing: $file"
        VALIDATION_PASSED=false
        return 1
    fi
}

# Function to check if starship is configured for a shell
check_starship_config() {
    local shell="$1"
    local config_file="$2"
    
    if [[ -f "$config_file" ]] && grep -q "starship init" "$config_file" 2>/dev/null; then
        echo -e "${GREEN}‚úì${NC} Starship configured for $shell"
    else
        echo -e "${YELLOW}‚ö†${NC} Starship not configured for $shell in $config_file"
    fi
}

echo ""
echo "Checking required tools..."
echo "========================="

# Required tools
check_command "git" true
check_command "curl" true
check_command "starship" true

echo ""
echo "Checking optional tools..."
echo "========================="

# Optional tools
check_command "bash" false
check_command "zsh" false
check_command "fish" false
check_command "nu" false
check_command "pwsh" false

# Modern CLI tools
# Check for bat (might be batcat on some systems)
if command -v bat &> /dev/null; then
    check_command "bat" false
elif command -v batcat &> /dev/null; then
    echo -e "${GREEN}‚úì${NC} bat is installed (as batcat)"
else
    echo -e "${YELLOW}‚ö†${NC} bat is NOT installed (optional)"
fi

check_command "rg" false

# Check for fd (might be fd-find on some systems)
if command -v fd &> /dev/null; then
    check_command "fd" false
elif command -v fd-find &> /dev/null; then
    echo -e "${GREEN}‚úì${NC} fd is installed (as fd-find)"
else
    echo -e "${YELLOW}‚ö†${NC} fd is NOT installed (optional)"
fi

check_command "lsd" false
check_command "eza" false  # exa is deprecated, replaced by eza
check_command "delta" false

echo ""
echo "Checking configuration files..."
echo "==============================="

# Check shell configurations
[[ -f "$HOME/.bashrc" ]] && check_starship_config "bash" "$HOME/.bashrc"
[[ -f "$HOME/.zshrc" ]] && check_starship_config "zsh" "$HOME/.zshrc"
[[ -f "$HOME/.config/fish/config.fish" ]] && check_starship_config "fish" "$HOME/.config/fish/config.fish"
[[ -f "$HOME/.config/nushell/config.nu" ]] && check_starship_config "nushell" "$HOME/.config/nushell/config.nu"
[[ -f "$HOME/.config/powershell/profile.ps1" ]] && check_starship_config "powershell" "$HOME/.config/powershell/profile.ps1"

# Check starship configuration
check_file "$HOME/.config/starship.toml" "Starship configuration"

echo ""
echo "Checking environment..."
echo "======================"

# Check if .local/bin is in PATH
if [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
    echo -e "${GREEN}‚úì${NC} ~/.local/bin is in PATH"
else
    echo -e "${YELLOW}‚ö†${NC} ~/.local/bin is NOT in PATH"
    echo "   Add it to your shell configuration: export PATH=\"\$HOME/.local/bin:\$PATH\""
fi

# Check font installation
echo ""
echo "Checking fonts..."
echo "================"

if command -v fc-list &> /dev/null; then
    if fc-list | grep -qi "JetBrainsMono.*Nerd"; then
        echo -e "${GREEN}‚úì${NC} JetBrains Mono Nerd Font is installed"
    else
        echo -e "${YELLOW}‚ö†${NC} JetBrains Mono Nerd Font is not installed"
        echo "   Run the installation script or install manually"
    fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
    if ls ~/Library/Fonts | grep -qi "JetBrainsMono.*Nerd"; then
        echo -e "${GREEN}‚úì${NC} JetBrains Mono Nerd Font is installed"
    else
        echo -e "${YELLOW}‚ö†${NC} JetBrains Mono Nerd Font might not be installed"
    fi
else
    echo -e "${YELLOW}‚ö†${NC} Cannot check font installation (fc-list not available)"
fi

# WSL-specific checks
{{- if .isWSL }}
echo ""
echo "Checking WSL integration..."
echo "=========================="

if [[ -n "${BROWSER:-}" ]]; then
    echo -e "${GREEN}‚úì${NC} BROWSER is set to: $BROWSER"
else
    echo -e "${YELLOW}‚ö†${NC} BROWSER environment variable is not set"
fi

if command -v wslview &> /dev/null || command -v explorer.exe &> /dev/null; then
    echo -e "${GREEN}‚úì${NC} Windows integration tools available"
else
    echo -e "${YELLOW}‚ö†${NC} Windows integration tools not found"
fi
{{- end }}

# Final status
echo ""
echo "================================"
if [[ "$VALIDATION_PASSED" == "true" ]]; then
    echo -e "${GREEN}‚úÖ All required validations passed!${NC}"
    
    # Check if this is first run
    if [[ ! -f "$HOME/.config/chezmoi/.validated" ]]; then
        mkdir -p "$HOME/.config/chezmoi"
        touch "$HOME/.config/chezmoi/.validated"
        
        echo ""
        echo "üìù First-time setup notes:"
        echo "- Restart your terminal or source your shell configuration"
        echo "- Set JetBrains Mono Nerd Font in your terminal preferences"
        {{- if lookPath "nu" }}
        echo "- For Nushell, run these commands:"
        echo '  mkdir ($nu.data-dir | path join "vendor/autoload")'
        echo '  starship init nu | save -f ($nu.data-dir | path join "vendor/autoload/starship.nu")'
        {{- end }}
    fi
else
    echo -e "${RED}‚ùå Some validations failed!${NC}"
    echo "Please install missing required tools and run 'chezmoi apply' again"
    exit 1
fi
{{- end -}}