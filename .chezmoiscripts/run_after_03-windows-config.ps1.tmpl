{{ if eq .chezmoi.os "windows" -}}
#!/usr/bin/env pwsh
# Windows Post-Install Configuration - Runs after other scripts

Write-Host "`n‚öôÔ∏è  Windows Configuration" -ForegroundColor Cyan
Write-Host "=======================" -ForegroundColor Cyan

# Install Cargo tools if Rust is installed
if (Get-Command cargo -ErrorAction SilentlyContinue) {
    Write-Host "`nü¶Ä Installing Cargo tools..." -ForegroundColor Yellow
    
    # Install cargo-binstall first for faster installations
    if (-not (Get-Command cargo-binstall -ErrorAction SilentlyContinue)) {
        Write-Host "Installing cargo-binstall..." -ForegroundColor Cyan
        cargo install cargo-binstall
    }
    
    # Install other tools via cargo-binstall
    $cargoTools = @("fnm", "eza", "tokei", "bottom", "cargo-install-update")
    foreach ($tool in $cargoTools) {
        if (-not (Get-Command $tool -ErrorAction SilentlyContinue)) {
            Write-Host "Installing $tool..." -ForegroundColor Cyan
            cargo binstall -y $tool
        } else {
            Write-Host "‚úÖ $tool already installed" -ForegroundColor Green
        }
    }
}

# Configure Starship if installed
if (Get-Command starship -ErrorAction SilentlyContinue) {
    Write-Host "`n‚≠ê Configuring Starship..." -ForegroundColor Yellow
    
    # Check if Starship is in PowerShell profile
    $profileDir = Split-Path -Parent $PROFILE
    if (-not (Test-Path $profileDir)) {
        New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
    }
    
    if (Test-Path $PROFILE) {
        $profileContent = Get-Content $PROFILE -Raw
        if ($profileContent -notmatch "starship init") {
            Add-Content -Path $PROFILE -Value "`n# Initialize Starship prompt`nInvoke-Expression (&starship init powershell)"
            Write-Host "‚úÖ Added Starship to PowerShell profile" -ForegroundColor Green
        }
    } else {
        Set-Content -Path $PROFILE -Value "# Initialize Starship prompt`nInvoke-Expression (&starship init powershell)"
        Write-Host "‚úÖ Created PowerShell profile with Starship" -ForegroundColor Green
    }
}

# Configure fnm if installed
if (Get-Command fnm -ErrorAction SilentlyContinue) {
    Write-Host "`nüì¶ Configuring fnm..." -ForegroundColor Yellow
    
    # PowerShell configuration
    if (-not (Test-Path $PROFILE)) {
        $profileDir = Split-Path -Parent $PROFILE
        if (-not (Test-Path $profileDir)) {
            New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
        }
        Set-Content -Path $PROFILE -Value ""
    }
    
    $profileContent = Get-Content $PROFILE -Raw
    if ($profileContent -notmatch "fnm env") {
        Add-Content -Path $PROFILE -Value "`n# Initialize fnm`nfnm env --use-on-cd | Out-String | Invoke-Expression"
        Write-Host "‚úÖ Added fnm to PowerShell profile" -ForegroundColor Green
    }
    
    # Nushell configuration
    if (Get-Command nu -ErrorAction SilentlyContinue) {
        $nuConfigPath = "$env:APPDATA\nushell\env.nu"
        if (Test-Path $nuConfigPath) {
            $nuContent = Get-Content $nuConfigPath -Raw
            if ($nuContent -notmatch "fnm env") {
                # Nushell doesn't have official fnm support, so we use a workaround
                $nuFnmInit = @"

# Initialize fnm (workaround for Nushell)
# Load fnm environment variables
load-env (fnm env --shell bash | lines | str replace 'export ' '' | str replace -a '"' '' | split column "=" | rename name value | where name != "FNM_ARCH" and name != "PATH" | reduce -f {} {|it, acc| `$acc | upsert `$it.name `$it.value })

# Update PATH with FNM_MULTISHELL_PATH - Windows doesn't need /bin suffix
`$env.PATH = (`$env.PATH | split row (char esep) | prepend `$env.FNM_MULTISHELL_PATH | str join (char esep))
"@
                Add-Content -Path $nuConfigPath -Value $nuFnmInit
                Write-Host "‚úÖ Added fnm to Nushell env.nu (using workaround)" -ForegroundColor Green
            }
        }
    }
    
    # Fish configuration - skip on Windows (not available via winget)
    # Fish can be installed via WSL or MSYS2 if needed
    
    # Install Node.js LTS if not already installed
    Write-Host "üì¶ Setting up Node.js via fnm..." -ForegroundColor Yellow
    # Load fnm environment in current session
    fnm env --use-on-cd | Out-String | Invoke-Expression
    
    # Check if any Node version is installed
    $nodeVersions = fnm list 2>$null
    if (-not $nodeVersions) {
        Write-Host "Installing Node.js LTS..." -ForegroundColor Cyan
        fnm install --lts
        fnm use lts-latest
        fnm default lts-latest
        Write-Host "‚úÖ Installed Node.js LTS" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Node.js already installed via fnm" -ForegroundColor Green
    }
}

# Configure Windows Terminal
Write-Host "`n‚öôÔ∏è  Configuring Windows Terminal..." -ForegroundColor Yellow

# Source settings location in chezmoi directory
$sourceSettings = Join-Path "{{ .chezmoi.sourceDir }}" "windows-terminal\settings.json"

if (Test-Path $sourceSettings) {
    # Check for Windows Terminal installations
    $wtPackages = @(
        @{
            Name = "Windows Terminal"
            Path = "$env:LOCALAPPDATA\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState"
        },
        @{
            Name = "Windows Terminal Preview"
            Path = "$env:LOCALAPPDATA\Packages\Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe\LocalState"
        }
    )
    
    $configured = $false
    foreach ($wt in $wtPackages) {
        if (Test-Path $wt.Path) {
            Write-Host "Found $($wt.Name)" -ForegroundColor Cyan
            $targetSettings = Join-Path $wt.Path "settings.json"
            
            # Backup existing settings if present
            if (Test-Path $targetSettings) {
                $backupPath = Join-Path $wt.Path "settings.backup.json"
                Copy-Item -Path $targetSettings -Destination $backupPath -Force
                Write-Host "  Backed up existing settings to: settings.backup.json" -ForegroundColor Gray
            }
            
            # Copy settings
            Copy-Item -Path $sourceSettings -Destination $targetSettings -Force
            Write-Host "  ‚úÖ Applied Windows Terminal settings" -ForegroundColor Green
            $configured = $true
        }
    }
    
    if (-not $configured) {
        Write-Warning "Windows Terminal not found. Settings are available at: $sourceSettings"
    }
} else {
    Write-Warning "Windows Terminal settings.json not found in chezmoi source"
}

# Show summary
Write-Host "`nüìä Configuration Summary" -ForegroundColor Cyan
Write-Host "========================" -ForegroundColor Cyan

# Check installed tools
$tools = @{
    "VS Code" = "code"
    "Git" = "git"
    "Python" = "python"
    "Go" = "go"
    "Rust" = "cargo"
    "Starship" = "starship"
    "ripgrep" = "rg"
    "fd" = "fd"
    "fnm" = "fnm"
    "eza" = "eza"
}

Write-Host "`nInstalled tools:" -ForegroundColor Yellow
foreach ($tool in $tools.GetEnumerator()) {
    if (Get-Command $tool.Value -ErrorAction SilentlyContinue) {
        Write-Host "  ‚úÖ $($tool.Key)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå $($tool.Key)" -ForegroundColor Red
    }
}

# Visual Studio 2022 reminder
if (Get-Command devenv -ErrorAction SilentlyContinue) {
    Write-Host "`n‚ö†Ô∏è  Visual Studio 2022 Community installed" -ForegroundColor Yellow
    Write-Host "   Remember to add Unreal Engine workloads:" -ForegroundColor Cyan
    Write-Host "   - Game development with C++" -ForegroundColor White
    Write-Host "   - Desktop development with C++" -ForegroundColor White
    Write-Host "   - .NET desktop development" -ForegroundColor White
}

Write-Host "`n‚ú® Configuration complete!" -ForegroundColor Green
Write-Host "`nüí° Next steps:" -ForegroundColor Yellow
Write-Host "1. IMPORTANT: Restart your terminal for PATH changes to take effect" -ForegroundColor Yellow
Write-Host "   - New tools may not be available until terminal restart" -ForegroundColor White
Write-Host "2. Run 'winget upgrade' periodically to update packages" -ForegroundColor White
Write-Host "3. Run 'cargo install-update -a' to update Rust tools" -ForegroundColor White
Write-Host "4. Node.js LTS has been installed via fnm (if available)" -ForegroundColor White
{{ end -}}