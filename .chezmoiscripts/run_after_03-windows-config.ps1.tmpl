{{ if eq .chezmoi.os "windows" -}}
#!/usr/bin/env pwsh
# Windows Post-Install Configuration - Runs after other scripts

Write-Host "`n‚öôÔ∏è  Windows Configuration" -ForegroundColor Cyan
Write-Host "=======================" -ForegroundColor Cyan

# Install Cargo tools if Rust is installed
if (Get-Command cargo -ErrorAction SilentlyContinue) {
    Write-Host "`nü¶Ä Installing Cargo tools..." -ForegroundColor Yellow
    
    # Install cargo-binstall first for faster installations
    if (-not (Get-Command cargo-binstall -ErrorAction SilentlyContinue)) {
        Write-Host "Installing cargo-binstall..." -ForegroundColor Cyan
        cargo install cargo-binstall
    }
    
    # Install other tools via cargo-binstall
    $cargoTools = @("eza", "tokei", "bottom", "cargo-update")
    foreach ($tool in $cargoTools) {
        if (-not (Get-Command $tool -ErrorAction SilentlyContinue)) {
            Write-Host "Installing $tool..." -ForegroundColor Cyan
            cargo binstall -y $tool
        } else {
            Write-Host "‚úÖ $tool already installed" -ForegroundColor Green
        }
    }
}

# Starship configuration is now handled by chezmoi templates

# Configure fnm if installed
if (Get-Command fnm -ErrorAction SilentlyContinue) {
    Write-Host "`nüì¶ Configuring fnm..." -ForegroundColor Yellow
    
    # fnm configuration for all shells is now handled by chezmoi templates
    
    # Fish configuration - skip on Windows (not available via winget)
    # Fish can be installed via WSL or MSYS2 if needed
    
    # Install Node.js LTS if not already installed
    Write-Host "üì¶ Setting up Node.js via fnm..." -ForegroundColor Yellow
    # Load fnm environment in current session
    fnm env --use-on-cd | Out-String | Invoke-Expression
    
    # Check if any Node version is installed
    $nodeVersions = fnm list 2>$null
    if (-not $nodeVersions) {
        Write-Host "Installing Node.js LTS..." -ForegroundColor Cyan
        fnm install --lts
        fnm use lts-latest
        fnm default lts-latest
        Write-Host "‚úÖ Installed Node.js LTS" -ForegroundColor Green
    } else {
        Write-Host "‚úÖ Node.js already installed via fnm" -ForegroundColor Green
    }
}

# Show summary
Write-Host "`nüìä Configuration Summary" -ForegroundColor Cyan
Write-Host "========================" -ForegroundColor Cyan

# Check installed tools
$tools = @{
    "VS Code" = "code"
    "Git" = "git"
    "Python" = "python"
    "Go" = "go"
    "Rust" = "cargo"
    "Starship" = "starship"
    "ripgrep" = "rg"
    "fd" = "fd"
    "fnm" = "fnm"
    "eza" = "eza"
}

Write-Host "`nInstalled tools:" -ForegroundColor Yellow
foreach ($tool in $tools.GetEnumerator()) {
    if (Get-Command $tool.Value -ErrorAction SilentlyContinue) {
        Write-Host "  ‚úÖ $($tool.Key)" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå $($tool.Key)" -ForegroundColor Red
    }
}

# Visual Studio 2022 reminder
if (Get-Command devenv -ErrorAction SilentlyContinue) {
    Write-Host "`n‚ö†Ô∏è  Visual Studio 2022 Community installed" -ForegroundColor Yellow
    Write-Host "   Remember to add Unreal Engine workloads:" -ForegroundColor Cyan
    Write-Host "   - Game development with C++" -ForegroundColor White
    Write-Host "   - Desktop development with C++" -ForegroundColor White
    Write-Host "   - .NET desktop development" -ForegroundColor White
}

Write-Host "`n‚ú® Configuration complete!" -ForegroundColor Green
Write-Host "`nüí° Next steps:" -ForegroundColor Yellow
Write-Host "1. IMPORTANT: Restart your terminal for PATH changes to take effect" -ForegroundColor Yellow
Write-Host "   - New tools may not be available until terminal restart" -ForegroundColor White
Write-Host "2. Run 'winget upgrade' periodically to update packages" -ForegroundColor White
Write-Host "3. Run 'cargo install-update -a' to update Rust tools" -ForegroundColor White
Write-Host "4. Node.js LTS has been installed via fnm (if available)" -ForegroundColor White
{{ end -}}