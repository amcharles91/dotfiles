# env.nu
# Nushell Environment Configuration

{{- if ne .chezmoi.os "windows" }}
# Source Ansible-managed environment
source-env ~/.config/ansible_generated/common.nu
{{- end }}

# Starship prompt initialization
# This needs to be in env.nu for proper setup
$env.STARSHIP_SHELL = "nu"
{{- if eq .chezmoi.os "windows" }}
mkdir ~\.cache\starship
starship init nu | save -f ~\.cache\starship\init.nu
{{- else }}
mkdir ~/.cache/starship
starship init nu | save -f ~/.cache/starship/init.nu
{{- end }}

{{- if eq .chezmoi.os "windows" }}
# Initialize fnm (Fast Node Manager) for Windows
# This is a workaround since fnm doesn't have native Nushell support
if (which fnm | is-not-empty) {
    # Hook to set up fnm environment on directory change
    $env.config.hooks.env_change.PWD = ($env.config.hooks.env_change.PWD | append {|before, after|
        if ('FNM_MULTISHELL_PATH' in $env) {
            let is_windows = ($nu.os-info.name == 'windows')
            if $is_windows {
                # Parse fnm env output and load it
                load-env (fnm env --shell bash | lines | str replace 'export ' '' | str replace -a '"' '' | split column '=' | rename name value | transpose -r | into record)
            }
            # Update PATH with FNM multishell path
            $env.PATH = ($env.PATH | split row (char esep) | prepend $env.FNM_MULTISHELL_PATH | str join (char esep))
        }
    })
    
    # Initialize fnm for the current session
    load-env (fnm env --shell bash | lines | str replace 'export ' '' | str replace -a '"' '' | split column '=' | rename name value | transpose -r | into record)
    $env.PATH = ($env.PATH | split row (char esep) | prepend $env.FNM_MULTISHELL_PATH | str join (char esep))
}
{{- end }}